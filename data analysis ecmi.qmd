---
title: "data analysis"
format: pdf
editor: visual

project:
  type: default
  
execute:
  echo: true
  warning: false
---

# Libraries laden & Working Directory setzen

```{r}
library(knitr)
library(rprojroot)
library(tidyverse)
library(countrycode)
library(jsonlite)
library(haven)
library(vdemdata)
library(openxlsx)
library(ggplot2)
library(whereami)
library(PerformanceAnalytics)
library(patchwork)
library(gmodels)
library(car)
library(ggpubr)


# Main Directory
rootpath = "D:/Development/Python Data Science/Minority-Representation/"

# create export dir
if(dir.exists("./plots/") == F){
  dir.create("./plots/")
}

```

# 1. Exportierte Daten laden

```{r}

minorities_data <- openxlsx::read.xlsx(paste0(rootpath, "final_data/minorities_data.xlsx"))

#minorities_data <- minorities_data %>% filter(electoral_sys == 2)


```

# 2. Auswertung: Hierarchisches Lineares Regressionsmodell

## 2.1 Lineares Regressionsmodell 1 aus der aV und den Kontrollvariablen

```{r}

lm_c <- lm(representation ~ 
                   electoral_dem +
                   candidate_restr +
                   partyban_ethnic + 
                   partyban_rel, 
                 data = minorities_data)

print(summary(lm_c))

```


## 2.2 Lineares Regressionsmodell 2 aus der aV, uV1 (quadratisch) und den Kontrollvariablen

```{r}

lm_c_uv1 <- lm(representation ~ 
                 I(electoral_sys^2) + 
                 electoral_dem + 
                 candidate_restr + 
                 partyban_ethnic + 
                 partyban_rel, 
               data = minorities_data)

print(summary(lm_c_uv1))

```

# VIF Modell 2

```{r}

vif(lm_c_uv1)

```

Verlgeich zwischen Kontrollvariablen Modell und Modell mit uV1

```{r}

anova(lm_c, lm_c_uv1)

```

## 2.3 Lineares Regressionsmodell 3 aus der aV, uV1, uV2 und Kontrollvariablen

```{r}

lm_c_uv1_2 <- lm(representation ~ 
                   I(electoral_sys^2) +
                   reserved_seat +
                   electoral_dem +
                   candidate_restr +
                   partyban_ethnic + 
                   partyban_rel, 
                 data = minorities_data)

print(summary(lm_c_uv1_2))

```

```{r}

anova(lm_c_uv1, lm_c_uv1_2)

```


# Deskriptive Auswertung

## Lagemaße

```{r}

var_list <- list(minorities_data$electoral_sys, 
             minorities_data$reserved_seat, 
             minorities_data$representation,  
             minorities_data$electoral_dem, 
             minorities_data$candidate_restr, 
             minorities_data$partyban_ethnic, 
             minorities_data$partyban_rel) 
var_names <- c("electoral_sys", 
                 "reserved_seat", 
                 "representation",
                 "electoral_dem", 
                 "candidate_restr",
                 "partyban_ethnic",
                 "partyban_rel")

for(i in c(1:length(var_list)))
{
  median <- median(var_list[[i]])  
  mean <- mean(var_list[[i]])
  min <- min(var_list[[i]])
  max <- max(var_list[[i]])
  sd <- sd(var_list[[i]])
  
  print(paste0("Variable: ", var_names[[i]]))
  print(paste0("Median:", median))
  print(paste0("Mean: ", mean))
  print(paste0("Min: ", min))
  print(paste0("Max: ", max))
  print(paste0("Standard Deviation: ", sd))
  print("")
  
}

```

## Kreuztabellen

```{r}
minorities_data$represent_dichotom <- ifelse(minorities_data$representation > 0, 1, 0)
# xtabs(~minorities_data$represent_dichotom+minorities_data$electoral_sys)

CrossTable(minorities_data$represent_dichotom, 
           minorities_data$electoral_sys,
           digits = 1, 
           prop.t = F,
           prop.chisq = F,
           format = "SPSS")

```

```{r}
CrossTable(minorities_data$represent_dichotom, 
           minorities_data$reserved_seat,
           digits = 1, 
           prop.t = F,
           prop.chisq = F,
           format = "SPSS")
```

## Boxplots und Histogramme für uVs und aV

# aV Representation

```{r}

hist <- minorities_data %>% ggplot(aes(x = representation)) +
  geom_histogram(aes(y = ..density..), bins = 10, fill = "lightgreen", color = "black", alpha = 0.7) +
  labs(title = "", y = "frequency") +
  theme_minimal()

boxplot <- minorities_data %>% ggplot(aes(x = "", y = representation)) +
  geom_boxplot(fill = "lightgreen", color = "black", alpha = 0.7) +
  labs(title = " ", x = "") +
  coord_flip() +
  theme_minimal()

combined <- ggarrange(hist, boxplot, ncol = 2, nrow = 1)

annotate_figure(combined, top = text_grob("Minority Representation: Histogram and Boxplot", size = 14))

ggsave("./plots/minority_representation.jpg", width = 7.5, height = 4)
```

## uV1

```{r}
hist <- minorities_data %>% ggplot(aes(x = electoral_sys)) +
  geom_histogram(aes(y = ..density..), bins = 3, fill = "lightgreen", color = "black", alpha = 0.7) +
  labs(title = "", x = "", y = "") +
  theme_minimal()

boxplot <- minorities_data %>% ggplot(aes(x = "", y = electoral_sys)) +
  geom_boxplot(fill = "lightgreen", color = "black", alpha = 0.7) +
  labs(title = " ", x = "", y = "") +
  theme_minimal()

boxplot + hist
```

```{r}
country_centered_data <- unique( minorities_data %>% select(countryname, electoral_sys) )

hist <- country_centered_data %>% ggplot(aes(x = electoral_sys)) +
  geom_histogram(aes(y = ..density..), bins = 3, fill = "lightgreen", color = "black", alpha = 0.7) +
  labs(title = "", x = "", y = "") +
  theme_minimal()

boxplot <- country_centered_data %>% ggplot(aes(x = "", y = electoral_sys)) +
  geom_boxplot(fill = "lightgreen", color = "black", alpha = 0.7) +
  labs(title = " ", x = "", y = "") +
  theme_minimal()

boxplot + hist
```

## uV2

```{r}
hist <- minorities_data %>% ggplot(aes(x = reserved_seat)) +
  geom_histogram(aes(y = ..density..), bins = 2, fill = "lightgreen", color = "black", alpha = 0.7) +
  labs(title = "", x = "", y = "") +
  theme_minimal()

boxplot <- minorities_data %>% ggplot(aes(x = "", y = reserved_seat)) +
  geom_boxplot(fill = "lightgreen", color = "black", alpha = 0.7) +
  labs(title = " ", x = "", y = "") +
  theme_minimal()

boxplot + hist
```

# Visualisierung

```{r}
minorities_data %>%  
    ggplot(aes(y = representation, color = as.factor(reserved_seat), group = reserved_seat)) +
    geom_boxplot() +
    coord_flip() +
    ggtitle("Boxplot Representation by Reserved Seats") +
    scale_color_manual(breaks = c(0, 1), 
                       values = c("black", "lightgreen"), 
                       labels = c("No Reserved Seats", "Reserved Seats"),
                       name = "Minority Protection Measures") +
  theme(axis.text.y = element_blank(),
        axis.ticks.length.y = unit(0, "line"),
        plot.title = element_text(size = 14, hjust = 0.5),
        axis.title.x = element_text(size = 11),
        legend.position = "bottom",
        legend.title = element_blank())

ggsave("./plots/Representation - Reserved Seats.png", width = 7.5, height = 4)

```

```{r}
minorities_data %>%  
    ggplot(aes(y = representation, color = as.factor(electoral_sys), group = electoral_sys)) +
    geom_boxplot() +
    coord_flip() +
    ggtitle("Minority representation across different electoral systems") +
    scale_color_manual(breaks = c(0, 1, 2), 
                       values = c("firebrick1", "black", "deepskyblue"), 
                       labels = c("Majoritarian", "Mixed", "Proportional"),
                       name = "Electoral System") +
  theme(axis.text.y = element_blank(),
        axis.ticks.length.y = unit(0, "line"),
        plot.title = element_text(size = 14, hjust = 0.5),
        axis.title.x = element_text(size = 11),
        legend.position = "bottom",
        legend.title = element_blank())


ggsave("./plots/Representation by Electoral System.png", width = 7.5, height = 4)

```

```{r}
# Grafik ergibt keinen Sinn
#alle ethnischen gruppen (av ~ uv)
minorities_data %>% 
    ggplot(aes(x = reserved_seat, y = representation, color = as.factor(electoral_sys))) + 
    xlab("Reserved Seats (0, 1)") + ylab("Representation") + ggtitle("Repräsentation abhängig von Minderheitschutzmaßnahmen nach Wahlsystem") +
    geom_point(size = 2, alpha = 0.7, position = position_jitter(width = 0.3, height = 0.1)) +
    scale_color_manual(breaks = c(0, 1, 2), 
                     values = c("firebrick1", "black", "deepskyblue"),
                     labels = c("Majoritarian", "Mixed", "Proportional"),
                     name = "Electoral System")
    geom_smooth(method = lm, se = F) 
```
